#!/bin/bash

###### NOTES : ######
#
#
#   almost every ape variable name start with "_in_var_"
#   almost every ape's functions variable name start with "_in_var_s_"
#
#
# === Tags ===
#
#
# Almost every ape primary function name starts with an underscore "_"
# But sometimes it has another prefix. That's why There are tags :
#   Tags are lines that start with "#:"
#   There are different tags. Here is their exhaustive list :
#     #:fun FUNNAME			Here is a function whose entire name is FUNNAME
#     #:short SHORTNAME			Here is a function whose short name is SHORTNAME
#     #:define SHORTNAME FUNNAME	Tells ape there's a function called FUNNAME whose short name is SHORTNAME
#
# The last tag is probably the most important for when you're hacking on ape (if you're because nobody's gonna use this script : it's so up bloaded...)
# These tags are to be placed into ~/.config/ape/tags.ape . When you type in 'ape SHORTNAME' (SHORTNAME is a function you wrote and imported into ape),
# ape searches for a '#:define SHORTNAME FUNNAME' tag to know which function you want to execute.
#
#
# === Printed Colors ===
#
#
# Foreground colors (sorted by number) :
#
# 1;1	Red	bold	error (ape must exit)
# 2	Green		information
# 3;1	Yellow	bold	error (ape can continue)
# 4	Blue		functions's standard output color
# 5	Magenta		ape's standard output color
# 6;1	Cyan	blod	important information
# 7	White		other
# 7;1	White	bold	colored information
#
# Foreground colors (sorted by signification) :
#
# 4	Blue		functions's standard output color
# 5	Magenta		ape's standard output color
# 2	Green		information
# 6;1	Cyan	blod	important information
# 7;1	White	bold	colored information
# 3;1	Yellow	bold	error (ape can continue)
# 1;1	Red	bold	error (ape must exit)
# 7	White		other

###### APE's VARIABLES : ######
# 
# .---------------------.-----------------------------------------------.
# (     NAME            |     DESCRIPTION                               )
# }---------------------+-----------------------------------------------{
# ( _in_var_shell       | name of shells compatible with this script    )
# }---------------------+-----------------------------------------------{
# ( _in_var_vers        | actual version of ape                         )
# }---------------------+-----------------------------------------------{
# ( _in_var_vers_sh     | shell type of this script, types :            )
# (                     | b = bash, z = zsh, f = fish, c = csh, k = ksh )
# }---------------------+-----------------------------------------------{
# ( _in_var_vers_build  | build number of this version                  )
# '---------------------'-----------------------------------------------'

_in_var_shell="bash"
_in_var_vers=0.2.0
_in_var_vers_sh="b"

_in_var_quiet=1
_in_var_quiet_all=""
_in_var_p_dontgo=0
_in_var_force=0

	# PID and Shell type (GIT/not GIT)
if test "$ACTIVE_SHELL"
then
	if echo "$ACTIVE_SHELL" | grep -qi "GIT"
	then
		_in_var_pid="$$"
		_in_var_shtype="GIT"
	else
		_in_var_pid="$PPID"
		_in_var_shtype="PPID"
#		_in_var_s_done=0
#		until test $_in_var_s_done = 1
#		do
#			_in_var_s_done=1
#			echo -ne "\033[0;33;1mERR: APE : Did not find 'GIT' in \$ACTIVE_SHELL, continue like in GIT Shell ? (y/n) => "
#			read awnser
#			echo -ne "\033[0m"
#			case "$awnser" in
#				"y" | "yes" ) _in_var_pid="$$" ; _in_var_shtype="GIT" ;;
#				"n" | "no" ) _in_var_pid="$PPID" ; _in_var_shtype="PPID" ;;
#				* ) echo -e "\033[0;36;1mAPE : unknown awnser '$awnser', please write 'yes' or 'no'\033[0m" ; _in_var_s_done=0 ;;
#			esac
#		done
	fi
else
	echo -e "\033[0;32mINFO: did not find 'ACTIVE_SHELL' variable, assuming running a GIT Shell\033[0m"
	_in_var_pid="$$"
	_in_var_shtype="GIT"
fi

###### PRIMARY FUNCTIONS : ######

#:short fun_nohelp
#:fun _fun_nohelp
_fun_nohelp(){
	# arguments for _in_pri_fun_nohelp :
	#   $1   :   /name of the function				ex : "/lsgit"
	#   $2   :   name of the argument that does not have help	ex : "--color"
	echo -e "\033[0;37;1mAPE$1 : no help message for '$2' argument... Try '$(echo $1 | sed "s/^\///g" | sed "s/$/ /g")--help'\033[0m"
}

#:short go
#:short to
#:short so
#:fun _gitsh_manage
_gitsh_manage(){
	_in_var_gs_vers="1.0"
	_in_var_gs_vers_stable="stable"

	case $1 in
		"vers" ) echo -e "\033[0;37;1mGIT-SH MANAGE\033[34m - primary git shell managing\n[builtin to ape]\n\nversion : $_in_var_gs_vers ($_in_var_gs_vers_stable)\nmade by : lapingenieur\033[0m\n" ;;
		"go" ) 
			if echo "$_in_var_shtype" | grep -i "GIT" >> /dev/null || echo $* | grep -qw "\-\-force" || echo $* | grep -qw "\-f"
			then
				if test "$ACTIVE_SHTUS" = 0
				then
					export ACTIVE_SHTUS=1
					export PATH="$PATH_GIT"
					echo "$PWD" | grep -E "/home/artg/Documents/myscripts/github(/|$)" >>/dev/null || cd ~/Documents/myscripts/github/
					echo -e "\033[0;36;1mStarting git mode\033[0m"
				else
					echo -e "\033[0;33;1mERR: APE/go : GIT shell already started.\033[0m"
				fi
			else
				echo "$_in_var_shtype"
				echo -e "\033[0;31;47;1mCRI:\033[0;31;1m APE/go : Not running in Git mode, this command could dammage your current shell (only for this session)."
				echo -e "\033[0;33;1m     Add -f argument to force\033[0m"
			fi
			;;
		"so" )
			if echo "$ACTIVE_SHELL" | grep -i "GIT" >> /dev/null || echo $* | grep -w "\-\-force" >> /dev/null || echo $* | grep -w "\-f" >> /dev/null
			then
				if test "$ACTIVE_SHTUS" != 0
				then
					export ACTIVE_SHTUS=0
					export PATH="$PATH_RECOVERY"
					echo -e "\033[0;36;1mStopping git mode\033[0m"
				else
					echo -e "\033[0;33;1mERR: APE/so : GIT shell already stopped.\033[0m"
				fi
			else
				echo -e "\033[0;31;47;1mCRI:\033[0;31;1m APE/so : Not running in Git mode, this command could dammage your current shell (only for this session)."
				echo -e "\033[0;33;1m     Add -f argument to force\033[0m"
			fi
			;;
		"to" ) 
			case $ACTIVE_SHTUS in
				"0" ) echo -e "\033[0;34;1m0\033[0;35;1m - Git shell status : \033[0;34;1munactive\033[0m" ;;
				"1" ) echo -e "\033[0;32;1m1\033[0;35;1m - Git shell status : \033[0;32;1mactive\\033[0m" ;;
				* ) echo -e "\033[0;31;1m?\033[0;35;1m - Git shell status : \033[0;31;1munknown ('$ACTIVE_SHTUS')\033[0;35;1m ; \033[0;33;1mreseting it to unactive\033[0m" ; _gitsh_manage so ;;
			esac
			;;
	esac
}

###### APE MAIN PART :  ######

while echo "$1" | grep -qE "^\-"
do
	case "$1" in
		"-V" | "--verbose" | "--verbosing" ) _in_var_quiet=0 ;;
		"--verbose-hard" | "--hard-verbose" | "--verbosing-hard" | "--hard-verbosing" ) _in_var_quiet=0 ; _in_var_quiet_all="--verbose-ape" ;;
		"-f" | "--force" ) _in_var_force=1 ;;
		"-fu" | "--unforce" ) _in_var_force=0 ;;
		"--like-ppid" | "--ppid-like" ) if test "$_in_var_force" = 1
			then
				_in_var_pid="$PPID"
				_in_var_shtype="PPID"
			else
				echo -e "Not using force mode"
			fi
			;;
		"--like-git" | "--git-like" ) if test "$_in_var_force" = 1
			then
				_in_var_pid="$$"
				_in_var_shtype="GIT"
			else
				echo -e "Not using force mode"
			fi
			;;
		"--use-pid" | "--pid" )
			shift
			if test $# = 0
			then
				echo -e "\033[0;33;1mERR: APE --use-pid : need an argument for '--use-pid'\033[0m (must be a number/PID)"
			else
				if echo "$1" | grep -qE "^[0-9]+$"
				then
					_in_var_pid=$1
					echo -e "\033[0;35mAPE --use-pid : using '$1' PID\033[0m"
				elif test "$1" = "--help" || test "$1" = "-h"
				then
					_in_var_dontgo=1
					echo -en "\033[0;35m"
					cat << EOF
APE : --use-pid argument help :

desc  :  use another PID
use   :  --use-pid PID
arguments :
  PID      PID to use
EOF
					echo -e "\033[0m"
				else
					echo -e "\033[0;31;1mCRI: APE --use-pid : unknown argument for '--use-pid'\033[0m ('$1') (must be a number/PID)"
					_in_var_dontgo=1
				fi
			fi
			;;
		"--vinfo" ) echo -ne "\033[0;36;1m"
			cat << EOF 
\$0      :  '$0'
PID     :  '$_in_var_pid'
SHTYPE  :  '$_in_var_shtype'
version :  '$_in_var_vers$_in_var_vers_sh'
EOF
			echo -en "\033[0m"
			;;
		"-h" | "--help" ) echo "this help page is to be done" ;;
		"-v" | "--vers" | "--version" )
			_in_var_p_dontgo=1
			echo -e "\033[0;37;1mAPE\033[35m - The Escape Program for GIT-Shells"
			cat << EOF

version :   v$_in_var_vers-$_in_var_vers_sh
type    :   $_in_var_vers_sh
EOF
			echo -e "\n\033[0;32mNOTE: This version only works for the '$_in_var_shell' shell(s)\033[0m"
			;;
	esac
	shift
done

if test $_in_var_p_dontgo = 0
then
	test "$_in_var_force" = 1 && echo -e "\033[0;36;1mForcing unsecure action\033[0m"	# info : force opt

	if test $_in_var_quiet = 0
	then
		if test "$_in_var_quiet_all"
		then
			echo -e "\033[0;36;1mHard Verbosing mode\033[0m"			# info : hard verbose opt
		else
			echo -e "\033[0;36;1mVerbosing mode\033[0m"				# info : verbose opt
		fi										# NOTE: no verbose and hard verbose opt message at the same time

		echo -e "\033[0;35mPID to use : \033[32m'$_in_var_pid'\033[0m"			# if verbose : info : PID
	fi

	. ~/.config/ape/include	###### HERE put your *sourcing* stuff in this file which is included in ape

	case "$1" in
		"go" ) shift ; _gitsh_manage go $* ;;
		"so" ) shift ; _gitsh_manage so $* ;;
		"to" ) shift ; _gitsh_manage to $* ;;
		* )
			if test $# != 0
			then
				if grep -qE "^#:define $1" ~/.config/ape/tags
				then
					_in_var_p_com=$(grep -E "^#:define $1" ~/.config/ape/tags | sed "s/^#:define $1 *//g" | tail -n1)
					shift
					$_in_var_p_com $*
					unset _in_var_p_com
				else
					if echo "$ACTIVE_SHELL" | grep -iq "GIT" || test "$_in_var_force" = 1
					then
						PATH_GIT="$PATH"	# saving PATH
						PATH="$PATH_RECOVERY"	# set real PATH
						$*			# execute
						PATH="$PATH_GIT"	# set git PAT
					else
						echo -e "\033[0;31;47;1mCRI:\033[0;31;1m Not running in a Git shell, this command could dammage your current shell (only for this session)."
						echo -e "\033[0;33;1m     Add --force argument to ape (like 'ape --force [ARGUMENTS]')\033[0m"
					fi
				fi
			else
				echo -e "\033[0;37;1mAPE\033[35m - The Escape Program for GIT-Shells\033[0m"
			fi
			;;
	esac
fi
