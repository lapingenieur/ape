#!/bin/bash

###### NOTES : ######
#
#
#   almost every ape variable name start with "_in_var_"
#   almost every ape's functions variable name start with "_in_var_s_"
#
#
# === Tags ===
#
#
# Almost every ape primary function name starts with an underscore "_"
# But sometimes it has another prefix. That's why There are tags :
#   Tags are lines that start with "#:"
#   There are different tags. Here is their exhaustive list :
#     #:fun FUNNAME			Here is a function whose entire name is FUNNAME
#     #:short SHORTNAME			Here is a function whose short name is SHORTNAME
#
#
# === Printed Colors ===
#
#
# Foreground colors (sorted by number) :
#
# 1;1	Red	bold	error (ape must exit)
# 2	Green		information
# 3;1	Yellow	bold	error (ape can continue)
# 4	Blue		functions's standard output color
# 5	Magenta		ape's standard output color
# 6;1	Cyan	blod	important information
# 7	White		other
# 7;1	White	bold	colored information
#
# Foreground colors (sorted by signification) :
#
# 4	Blue		functions's standard output color
# 5	Magenta		ape's standard output color
# 2	Green		information
# 6;1	Cyan	blod	important information
# 7;1	White	bold	colored information
# 3;1	Yellow	bold	error (ape can continue)
# 1;1	Red	bold	error (ape must exit)
# 7	White		other

###### APE's VARIABLES : ######
# 
# .---------------------.-----------------------------------------------.
# (     NAME            |     DESCRIPTION                               )
# }---------------------+-----------------------------------------------{
# ( _in_var_shell       | name of shells compatible with this script    )
# }---------------------+-----------------------------------------------{
# ( _in_var_vers        | actual version of ape                         )
# }---------------------+-----------------------------------------------{
# ( _in_var_vers_sh     | shell type of this script, types :            )
# (                     | b = bash, z = zsh, f = fish, c = csh, k = ksh )
# }---------------------+-----------------------------------------------{
# ( _in_var_vers_build  | build number of this version                  )
# '---------------------'-----------------------------------------------'

_in_var_shell="bash"
_in_var_vers=0.2.0
_in_var_vers_sh="b"

_in_var_vers_build=3

_in_var_quiet=1
_in_var_quiet_all=""
_in_var_p_dontgo=0

	# PID and Shell type (GIT/not GIT)
if echo "$0" | grep -qiE "ape$" || echo "$0" | grep -qiE "ape_bash$"
then
	_in_var_pid="$PPID"
	_in_var_shtype="PPID"
else
	if test "$ACTIVE_SHELL"
	then
		if echo "$ACTIVE_SHELL" | grep -i "GIT"
		then
			_in_var_pid="$$"
			_in_var_shtype="GIT"
		else
			_in_var_s_done=0
			until test $_in_var_s_done = 1
			do
				_in_var_s_done=1
				echo -ne "\033[0;33;1mERR: APE : Did not find 'GIT' in \$ACTIVE_SHELL, continue like in GIT Shell ? (y/n) => "
				read awnser
				echo -ne "\033[0m"
				case "$awnser" in
					"y" | "yes" ) _in_var_pid="$$" ; _in_var_shtype="GIT" ;;
					"n" | "no" ) _in_var_pid="$PPID" ; _in_var_shtype="PPID" ;;
					* ) echo -e "\033[0;36;1mAPE : unknown awnser '$awnser', please write 'yes' or 'no'\033[0m" ; _in_var_s_done=0 ;;
				esac
			done
		fi
	else
		echo -e "\033[0;32mINFO: did not find 'ACTIVE_SHELL' variable, assuming running a GIT Shell\033[0m"
	fi
fi

###### PRIMARY FUNCTIONS : ######

#:short fun_nohelp
#:fun _fun_nohelp
_fun_nohelp(){
	# arguments for _in_pri_fun_nohelp :
	#   $1   :   /name of the function				ex : "/lsgit"
	#   $2   :   name of the argument that does not have help	ex : "--color"
	echo -e "\033[0;37;1mAPE$1 : no help message for '$2' argument... Try '$(echo $1 | sed "s/^\///g" | sed "s/$/ /g")--help'\033[0m"
}

#:short lsgit
#:fun _lsgit
_lsgit(){
	_in_var_s_pid="$_in_var_pid"
	_in_var_s_color="auto"
	_in_var_s_mode="0"
	_in_var_s_dontgo=0
	_in_var_s_vers=1.0
	until test $# = 0
	do
		case "$1" in
			"--verbose-ape" ) true ;; # ape-verbosing has no effect
			"--color" | "-c" ) shift
				if test $# = 0
				then
					echo -e "\033[0;33;1mERR: APE/lsgit --color : need an argument for '--color'\033[0m (use '--color --help')"
				else
					case "$1" in
						"auto" ) _in_var_s_color="auto" ;;
						"never" | "n" ) _in_var_s_color="never" ;;
						"always" | "a" ) _in_var_s_color="always" ;;
						"--help" | "-h" | "help" | "h" )
							_in_var_s_dontgo=1
							echo -ne "\033[0;34m"
							cat << EOF
APE/lsgit : --color argument help :

NOTE: no effetct if found right PID with '--shell'
desc  :  color mode
use   :  lsgit --color MODE
modes :
  auto     automatic
  always   always colored
  never    never colored
EOF
							echo -e "\033[0m" ;;
						* ) echo -e "\033[0;33;1mERR: APE/lsgit --color : unknown argument for --color option ('$1')\033[0m (use '--color --help')" ;;
					esac
				fi
				;;
			"--use-pid" | "--pid" | "-p" )
				shift
				if test $# = 0
				then
					echo -e "\033[0;33;1mERR: APE/lsgit --use-pid : need an argument for '--use-pid'\033[0m (must be a number/PID)"
				else
					if echo "$1" | grep -qE "^[0-9]+$"
					then
						_in_var_s_pid=$1
						echo -e "\033[0;34mAPE/lsgit --use-pid : using '$1' PID\033[0m"
					elif test "$1" = "--help" || test "$1" = "-h"
					then
						_in_var_s_dontgo=1
						echo -en "\033[0;34m"
						cat << EOF
APE/lsgit : --use-pid argument help :

NOTE: --use-pid has no effect without '--shell'
desc  :  use another PID
use   :  lsgit --use-pid PID
arguments :
  PID      PID to use
EOF
						echo -e "\033[0m"
					else
						echo -e "\033[0;31;1mCRI: APE/lsgit --use-pid : unknown argument for '--use-pid'\033[0m ('$1') (must be a number/PID)"
						_in_var_s_dontgo=1
					fi
				fi
				;;
			"--help" | "-h" )
				_in_var_s_dontgo=1
				echo -ne "\033[0;34m"
				cat <<EOF
APE/lsgit : help :

desc  :  list ~/.sh_git* files
use   :  lsgit [OPTION]...
options :
  --color, -c      choose color mode for ls
  --help, -h       print this help page
  --version, -v    print the "about" page
  --shell, -s      is there a file with \$PID extention
  --all, -a        what is inside ~/.sh_git.all
  --use-pid PID, --pid PID, -p PID
  \`=>  use PID instead of general PID
       NOTE: no effect without '--shell'
EOF
				echo -e "\033[0m" ;;
			"--version" | "--vers" | "-v" )
				_in_var_s_dontgo=1
				echo -e "\033[0;37;1mlsgit\033[34m - list ~/.sh_git* files"
				cat <<EOF

lsgit - list ~/.sh_git* files
[builtin to APE]

version : $_in_var_s_vers (stable)
made by : lapingenieur
EOF
				echo -e "\033[0m" ;;
			"--shell" | "-s" )
				if test "$2" = "--help" || test "$2" = "-h"
				then
					_in_pri_fun_nohelp /lsgit $1
					shift
				else
					_in_var_s_mode="shell"
				fi ;;
			"--all" | "-a" )
				if test "$2" = "--help" || test "$2" = "-h"
				then
					_in_pri_fun_nohelp /lsgit $1
					shift
				else
					_in_var_s_mode="all"
				fi ;;
			* ) echo -e "\033[0;33;1mERR: APE/lsgit : unknown argument ('$1')\033[0m (use '--help')" ;;
		esac
		shift
	done

	if test "$_in_var_s_dontgo" = 0
	then
		case "$_in_var_s_mode" in
			"0" ) ls -A ~/ | grep --color=$_in_var_s_color ".zsh_git" ;;
			"shell" )
				if ls -A ~/ | grep -q ".zsh_git.p.$_in_var_s_pid"
				then
					echo -e "\033[0;36;1m => \033[0;37;1mfound\033[0;36;1m a ~/.zsh_git.p file for \033[0;37m'$_in_var_s_pid'\033[0;36;1m PID :\033[0m"
					ls -A ~/ | grep --color=never ".zsh_git" | sed "s/\.zsh_git\.p\.$_in_var_s_pid/\.zsh_git\.p\.$_in_var_s_pid       <===/g"
				else
					echo -e "\033[0;36;1m => \033[0;37;1mno\033[0;36;1m ~/.zsh_git.p file for \033[0;37m'$_in_var_s_pid'\033[0;36;1m PID :\033[0m"
					ls -A ~/ | grep --color=$_in_var_s_color ".zsh_git"
				fi
				;;
			"all" )
				if test -f ~/.zsh_git.all
				then
					if grep -q "go" ~/.zsh_git.all
					then
						echo -e "\033[0;36;1m => \033[32mdid find 'go'\033[36m in ~/.zshrc\033[0m"
						echo -e "\033[0;36;1m\`=> Git Shell mode \033[37malways\033[36m activated\033[0m"
					else
						echo -e "\033[0;36;1m => \033[32mdid not find 'go'\033[36m in ~/.zshrc\033[0m"
						echo -e "\033[0;36;1m\`=> Git Shell mode \033[37mnot always\033[36m activated\033[0m"
					fi
				else
					echo -e "\033[0;33;1mERR: There is \033[37mno ~/.zsh_git.all\033[33m file\033[0m"
				fi
				;;
			* ) echo -e "\033[0;33;1mCRI: APE/lsgit [ INTERN ] : unknown mode ('$_in_var_s_mode')\033[0m" ;;
		esac
	fi
}

#:short mkgit
#:fun _mkgit
_mkgit(){
	_in_var_m_pid="$_in_var_pid"
	_in_var_m_verbose=0
	_in_var_m_dontgo=0
	_in_var_m_vers=1.0
	_in_var_m_shtype="$_in_var_shtype"
	_in_var_m_force="$_in_var_force"
	until test $# = 0
	do
		case "$1" in
			"--ls" | "-l" ) _in_var_m_list=1 ;;
			"--force" | "-f" ) _in_var_m_force=1 ; echo -e "\033[0;32mINFO: \033[0;34mForcing unsecure action for \033[37mmkgit only\033[0m" ;;
			"--use-pid" | "--pid" ) true ;; # no need of --use-pi, executes 'true' so that next time PID will be $1, and $1 as a number is a PID
			"--verbose-ape" | "--verbose" | "--verbosing" | "-V" ) _in_var_m_verbose=1 ;;
			"--like-git" | "--git-like" )
				if test "$_in_var_m_force" = 1
				then
					_in_var_m_shtype="GIT"
					echo -e "\033[0;34mUsing mkgit like for GIT Shells\033[0m"
				else
					_in_var_m_dontgo=1
					echo -e "\033[0;31;47;1mCRI:\033[0;31;1m Need force ape option to do this action. This command could dammage your current shell (only for this session).\033[0m"
					echo -e "\033[0;33;1m     Add --force argument to ape (like 'ape --force [ARGUMENTS]')\033[0m"
				fi
				;;
			"--like-ppid" | "--ppid-like" )
				if test "$_in_var_m_force" = 1
				then
					_in_var_m_shtype="PPID"
					echo -e "\033[0;34mUsing mkgit like for PPID Shells\033[0m"
				else
					_in_var_m_dontgo=1
					echo -e "\033[0;31;47;1mCRI:\033[0;31;1m Need force ape option to do this action. This command could dammage your current shell (only for this session).\033[0m"
					echo -e "\033[0;33;1m     Add --force argument to ape (like 'ape --force [ARGUMENTS]')\033[0m"
				fi
				;;
			"--help" | "-h" )
				_in_var_m_dontgo=1
				echo -ne "\033[0;34m"
				cat <<EOF
APE/mkgit : help :

desc  :  make a ~/.sh_git.p.\$PID file
use   :  mkgit [OPTION]... [PID]
options :
  --help, -h       print this help page
  --version, -v    print the "about" page
  --verbose, -V    verbosing mode
  --force, -f      forcing opt. only for mkgit
  --ls -l          use lsgit after touched
  --like-git       change \$shtype to GIT
  --like-ppid      change \$shtype to PPID
NOTE: these 2 last options need ape force mode
PID argument :
  use PID instead of general PID
  NOTE: PID must be a number/PID
EOF
				echo -e "\033[0m" ;;
			"--version" | "--vers" | "-v" )
				_in_var_m_dontgo=1
				echo -e "\033[0;37;1mlsgit\033[34m - list ~/.sh_git* files"
				cat <<EOF

mkgit - make a ~/.sh_git.p.\$PID file
[builtin to APE]

version : $_in_var_m_vers (stable)
made by : lapingenieur
EOF
				echo -e "\033[0m" ;;
			* )
				if echo "$1" | grep -qE "^[0-9]+$"
				then
					_in_var_m_pid="$1"
				else
					echo -e "\033[0;33;1mERR: APE/mkgit : unknown argument ('$1')\033[0m (use '--help')"
				fi ;;
		esac
		shift
	done

	if test $_in_var_m_dontgo = 0
	then
		if test "$_in_var_m_shtype" = "GIT" && test "$_in_var_pid" = "$_in_var_m_pid"
		then
			_in_var_s_done=0
			until test $_in_var_s_done = 1
			do
				echo -ne "\033[0;33;1mTouch a ~/.sh_git.p file for the current GIT Shell ? (y/n)\033[0m "
				read awnser
				echo -ne "\033[0m"
				_in_var_s_done=1
				case "$awnser" in
					"y" | "yes" ) _in_var_m_dontgo=0 ;;
					"n" | "no" ) _in_var_m_dontgo=1 ;;
					* ) echo -e "\033[0;36;1mAPE : unknown awnser '$awnser', please write 'yes' or 'no'\033[0m" ; _in_var_s_done=0 ;;
				esac
			done
		fi
		if test $_in_var_m_dontgo = 0
		then
			touch ~/.zsh_git.p.$_in_var_m_pid
			_in_var_m_exst=$?
			if test $_in_var_m_exst = 0
			then
				echo -e "\033[0;36;1m => \033[37mTouched\033[36m ~/.zsh_git.p.$_in_var_m_pid\033[0m"
			else
				echo -e "\033[0;31;1mERR: APE/mkgit : failed to touch ~/.zsh_git.p.$_in_var_m_pid\033[0m (exit status '$_in_var_m_exst')"
			fi
		fi
	fi
}

while echo "$1" | grep -qE "^\-"
do
	case "$1" in
		"-V" | "--verbose" | "--verbosing" ) _in_var_quiet=0 ;;
		"--verbose-hard" | "--hard-verbose" | "--verbosing-hard" | "--hard-verbosing" ) _in_var_quiet=0 ; _in_var_quiet_all="--verbose-ape" ;;
		"-f" | "--force" ) _in_var_force=1 ;;

		"--use-pid" | "--pid" )
			shift
			if test $# = 0
			then
				echo -e "\033[0;33;1mERR: APE --use-pid : need an argument for '--use-pid'\033[0m (must be a number/PID)"
			else
				if echo "$1" | grep -qE "^[0-9]+$"
				then
					_in_var_pid=$1
					echo -e "\033[0;35mAPE --use-pid : using '$1' PID\033[0m"
				elif test "$1" = "--help" || test "$1" = "-h"
				then
					_in_var_dontgo=1
					echo -en "\033[0;35m"
					cat << EOF
APE : --use-pid argument help :

desc  :  use another PID
use   :  --use-pid PID
arguments :
  PID      PID to use
EOF
					echo -e "\033[0m"
				else
					echo -e "\033[0;31;1mCRI: APE --use-pid : unknown argument for '--use-pid'\033[0m ('$1') (must be a number/PID)"
					_in_var_dontgo=1
				fi
			fi
			;;

		"-v" | "--vers" | "--version" )
			_in_var_p_dontgo=1
			echo -e "   \033[0;31;1mAPE\033[36m - The Escape Program for GIT-Shells\033[0m"
			echo -e "\n\033[0;34;1mversion :   v$_in_var_vers-$_in_var_vers_sh\033[0m"
			echo -e "\033[0;34;1mbuild   :   n° $_in_var_vers_build\033[0m"
			echo -e "\033[0;34;1mtype    :   $_in_var_vers_sh\033[0m"
			echo -e "\n\033[0;32mNOTE: This version only works for the '$_in_var_shell' shell(s)\033[0m"
			echo -e "\033[0;32mNOTE: The build number is probably note up to date\033[0m"
			;;
		"-h" | "--help" ) echo "this help page is to be done" ;;
	esac
	shift
done

if test $_in_var_p_dontgo = 0
then
	test "$_in_var_force" = 1 && echo -e "\033[0;36;1mForcing unsecure action\033[0m"	# info : force opt

	if test $_in_var_quiet = 0
	then
		if test "$_in_var_quiet_all"
		then
			echo -e "\033[0;36;1mHard Verbosing mode\033[0m"			# info : hard verbose opt
		else
			echo -e "\033[0;36;1mVerbosing mode\033[0m"				# info : verbose opt
		fi										# NOTE: no verbose and hard verbose opt message at the same time

		echo -e "\033[0;35mPID to use : \033[32m'$_in_var_pid'\033[0m"			# if verbose : info : PID
	fi

	case "$1" in
		"lsgit" ) shift ; _lsgit $* ;;
		"mkgit" ) shift ; _mkgit $* ;;
		* )
			if test $# != 0
			then
				if echo "$ACTIVE_SHELL" | grep -iq "GIT" || test "$_in_var_force" = 1
				then
					PATH_GIT="$PATH"	# saving PATH
					PATH="$PATH_RECOVERY"	# set real PATH
					$*			# execute
					PATH="$PATH_GIT"	# set git PAT
				else
					echo -e "\033[0;31;47;1mCRI:\033[0;31;1m Not running in a Git shell, this command could dammage your current shell (only for this session)."
					echo -e "\033[0;33;1m     Add --force argument to ape (like 'ape --force [ARGUMENTS]')\033[0m"
				fi
			fi
			;;
	esac
fi
